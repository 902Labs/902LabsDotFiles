" Configuration related to plugins
" --------------------------------
"
" This file should be loaded only if the &loadplugins options is set
" If we start up vim with --noplugins then we get faster startup, but some of
" the commands in this file might error if the plugins aren't loaded.

" Deoplete
let g:deoplete#enable_at_startup = 1

call deoplete#custom#option({
  \ 'smart_case': v:true,
  \ 'profile': v:true,
  \ })

call deoplete#custom#source(
  \ 'file', 'enable_buffer_path', v:true)

" JSHint 2
set runtimepath+=~/.vim/bundle/jshint2

" Polyglot
" let g:polyglot_disabled = ['ts']
let g:typescript_compiler_options='--jsx'

" vim-jsx-typescript
" set filetypes as typescript.tsx
autocmd BufNewFile,BufRead *.tsx,*.jsx set filetype=typescript.tsx

hi tsxTagName guifg=#E06C75
hi tsxCloseString guifg=#F99575
hi tsxCloseTag guifg=#F99575
hi tsxAttributeBraces guifg=#F99575
hi tsxEqual guifg=#F99575
hi tsxAttrib guifg=#F8BD7F cterm=italic

" NERDTree
let NERDTreeQuitOnOpen=1 " Close NERDTree After Opening File
let NERDTreeShowHidden=1
let NERDTreeMapOpenVSplit='v'
let NERDTreeMapOpenSplit='s'
let NERDTreeHijackNetrw='0'
let NERDTreeIgnore=['\~$', '.*\.pyc$', 'pip-log\.txt$', '^.git$', '^.DS_Store$']
let NERDTreeMouseMode=2
let NERDTreeWinSize=45
let NERDTreeDirArrows=1
let NERDTreeCasadeOpenSingleChildDir=1
let NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.bak$', '\~$']
"autocmd vimenter * if !argc() | NERDTree | endif " open NERD tree automatically if no files are specified
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
            " ^^ if NERD Tree is the only open buffer, close vim
noremap <Leader><tab> :NERDTreeToggle<cr>

" tComment
" Disable all of the default mappings
let g:tcommentMapLeader1   = ""
let g:tcommentMapLeader2   = ""
let g:tcommentMapLeaderOp1 = ""
let g:tcommentMapLeaderOp2 = ""

" Create the only ones that matters
noremap <Leader>cc :TComment<cr>

" vim-json settings
let g:vim_json_syntax_conceal = 0

" EasyMotion
" let g:EasyMotion_do_mapping = 0

" nnoremap <Leader>f :call EasyMotion#F(0,0)<cr>
" nnoremap <Leader>F :call EasyMotion#F(0,1)<cr>
" nnoremap <Leader>j :call EasyMotion#JK(0,0)<cr>
" nnoremap <Leader>k :call EasyMotion#JK(0,1)<cr>
"
" onoremap <Leader>f :call EasyMotion#F(0,0)<cr>
" onoremap <Leader>F :call EasyMotion#F(0,1)<cr>
" onoremap <Leader>j :call EasyMotion#JK(0,0)<cr>
" onoremap <Leader>k :call EasyMotion#JK(0,1)<cr>
"
" vnoremap <Leader>f :<C-u>call EasyMotion#F(1,0)<cr>
" vnoremap <Leader>F :<C-u>call EasyMotion#F(1,1)<cr>
" vnoremap <Leader>j :<C-u>call EasyMotion#JK(1,0)<cr>
" vnoremap <Leader>k :<C-u>call EasyMotion#JK(1,1)<cr>

hi link EasyMotionTarget ErrorMsg
hi link EasyMotionShade  Comment

" signature plugin
" Not config for the plugin, just coloring for it.
hi! link SignColumn LineNr

" Gundo
nnoremap <leader>g :GundoToggle<CR>
let g:gundo_preview_bottom = 1

" Ctrl-P
let g:ctrlp_map  ="<leader>t"
nnoremap <silent> t :CtrlP<cr>

" change prompt mappings
let g:ctrlp_prompt_mappings = {
    \ 'PrtClearCache()':      ['<c-r>'],
    \ }

"
let g:ctrlp_max_files = 200
let g:ctrlp_dotfiles = 0
let g:ctrlp_show_hidden = 0
let g:ctrlp_match_window = 'bottom,order:ttb'
let g:ctrlp_switch_buffer = 0
let g:ctrlp_use_caching = 1
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\.git$\|\.hg$\|\.svn$\|bower_components$\|dist$|public$\|node_modules$\|project_files$',
    \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$|\.DS_Store$'
\ }

let g:ctrlp_cache_dir = $HOME . '/.vim/tmp/ctrp_cache'

" Add support for silver searcher
if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor
  let g:ctrlp_user_command = 'ag %s -loc --nocolor -g ""'
endif

" Supertab settings
let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabLongestHighlight = 1


" Syntastic settings
let g:syntastic_scss_sass_args="--load-path ./bower_components"

let g:syntastic_javascript_jshint_conf="~/.jshintrc"

let g:syntastic_coffee_coffeelint_args="--csv -f ~/.vim/syntastic_configs/coffeelint"
" let g:syntastic_coffee_coffeelint_tail="
let g:syntastic_html_tidy_ignore_errors = [
    \ "proprietary attribute",
\ ]

" Markdown block highlighting
let g:markdown_fenced_languages = ['ruby', 'coffeescript=coffee', 'coffee', 'html', 'haml', 'javascript']

" vim-jsx specific settings
let g:syntastic_javascript_checkers = ['jsxhint']
let g:syntastic_javascript_jsxhint_exec = 'jsx-jshint-wrapper'


let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'filename' ] ],
      \   'right': [ [ 'lineinfo' ],
      \              [ 'percent' ],
      \              [ 'readonly', 'filetype' ] ]
      \ },
      \ 'component_function': {
      \   'filename': 'LightlineFilename',
      \   'readonly': 'LightlineReadonly',
      \   'gitbranch': 'fugitive#head'
      \ },
      \ 'component': {
      \   'charvaluehex': '0x%B'
      \ },
      \ }

function! LightlineFilename()
  let filename = expand('%:f') !=# '' ? expand('%:f') : '[No Name]'
  let modified = &modified ? ' +' : ''
  return filename . modified
endfunction

function! LightlineReadonly()
	return &readonly && &filetype !=# 'help' ? 'RO' : ''
endfunction

let g:unite_force_overwrite_statusline = 0
let g:vimfiler_force_overwrite_statusline = 0
let g:vimshell_force_overwrite_statusline = 0
